class Solution {
    public:
        bool hasPathSum(TreeNode *root, int sum) {
            if (root == NULL) return false;
            if (root->left == NULL && root->right == NULL) {
                return sum == root->val;
            }
            int remainingSum = sum - root->val;
            return hasPathSum(root->left, remainingSum) || hasPathSum(root->right, remainingSum);
        }
};


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int Solution::hasPathSum(TreeNode* A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    cout << "Node: "  << A->val << " - Sum: " << B << endl;
    
    if (A == NULL) return 0;
    
    //if (B <= 0) return 0;
    
    if (A->left == NULL && A->right == NULL) {
        return A->val == B;
    }
    
    cout << "Remaining Sum: " << B - A->val << endl;
    int remaining = B - A->val;
    
    return hasPathSum(A->left, remaining) || hasPathSum(A->right, remaining);
    
}

11 1 2 3 -1 -1 4 -1 -1 5 -1 -1
13
Should return True


1113 0 1 1 2 1 0 2 1 0 2 1 1 0 -1 1 0 0 2 -1 0 0 1 1 0 0 1 2 -1 -1 0 1 1 1 -1 -1 1 0 2 1 1 0 1 -1 -1 2 -1 1 0 1 1 1 2 0 -1 -1 2 0 2 2 0 1 1 0 1 2 0 2 2 0 2 0 -1 -1 0 2 -1 0 1 0 1 0 0 0 1 2 -1 -1 -1 -1 1 0 0 1 2 2 -1 -1 0 0 1 2 -1 1 -1 0 2 2 -1 0 -1 -1 1 0 1 1 1 1 2 -1 -1 -1 2 1 0 1 -1 -1 -1 1 0 2 0 -1 0 2 1 2 0 -1 2 2 2 2 -1 -1 1 2 0 2 2 0 2 2 2 1 2 2 -1 -1 0 1 -1 1 -1 -1 1 -1 0 2 2 2 2 2 -1 2 1 -1 2 -1 0 2 1 2 -1 2 0 -1 -1 0 -1 -1 0 -1 1 -1 0 -1 -1 1 2 1 2 2 0 0 0 2 2 1 2 0 2 -1 -1 -1 -1 -1 0 0 2 0 0 2 -1 0 2 -1 -1 0 0 1 0 1 2 0 2 1 -1 2 -1 1 -1 -1 0 0 -1 1 -1 -1 -1 -1 -1 0 1 2 0 2 -1 0 2 -1 0 1 0 -1 1 1 2 0 1 2 0 0 -1 -1 1 -1 0 2 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 2 1 2 2 1 2 2 2 1 0 2 -1 0 1 2 0 -1 1 -1 2 1 2 2 -1 2 1 1 -1 2 0 1 -1 -1 0 0 0 1 2 0 0 2 -1 0 -1 -1 0 -1 0 -1 1 -1 -1 -1 -1 -1 0 1 -1 -1 2 -1 2 -1 1 0 0 -1 1 1 -1 -1 -1 -1 0 -1 1 0 -1 0 -1 2 -1 -1 -1 -1 0 2 -1 -1 -1 -1 2 -1 0 0 2 2 1 2 2 0 -1 2 0 0 0 2 -1 -1 2 -1 2 1 -1 1 1 -1 1 1 -1 -1 -1 0 -1 -1 -1 2 -1 0 0 0 0 1 0 0 2 1 -1 -1 0 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 2 1 -1 0 2 -1 -1 -1 1 1 0 0 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 0 0 2 0 -1 2 1 -1 2 -1 -1 -1 1 -1 -1 2 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 2 0 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 2 2 -1 -1 -1 -1 0 -1 0 2 1 0 -1 0 -1 1 1 1 -1 1 1 1 2 -1 -1 1 -1 1 1 -1 1 -1 -1 -1 0 -1 -1 -1 1 0 -1 -1 2 1 1 2 -1 1 0 1 -1 -1 2 -1 2 1 2 -1 -1 -1 -1 -1 -1 2 -1 1 2 1 -1 -1 -1 2 2 0 -1 1 -1 -1 1 0 1 -1 1 1 0 2 2 2 1 1 -1 -1 -1 1 1 -1 0 -1 -1 1 -1 1 1 0 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 0 -1 -1 -1 -1 -1 2 -1 0 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 2 2 -1 -1 -1 -1 -1 0 0 2 0 -1 -1 1 -1 -1 -1 0 -1 0 0 -1 2 -1 -1 -1 -1 -1 -1 0 2 -1 2 2 2 -1 -1 -1 0 -1 -1 0 2 2 0 1 1 -1 -1 2 -1 0 -1 0 0 1 -1 -1 0 -1 -1 -1 0 0 -1 -1 1 1 0 0 0 1 1 2 2 1 -1 -1 1 0 -1 0 1 2 0 2 1 -1 -1 1 2 -1 -1 2 -1 -1 -1 -1 -1 0 -1 0 -1 -1 2 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 1 0 -1 -1 -1 -1 -1 2 0 2 -1 -1 -1 1 2 1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 0 0 -1 2 1 1 -1 0 -1 -1 -1 1 -1 -1 -1 2 -1 -1 1 -1 -1 -1 1 -1 2 0 0 0 0 -1 -1 1 -1 -1 -1 2 1 2 -1 -1 1 -1 1 -1 1 2 -1 1 0 2 0 -1 1 2 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 0 -1 -1 -1 -1 -1 -1 1 -1 1 2 2 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 1 -1 0 0 -1 -1 -1 1 -1 0 -1 -1 2 0 2 2 -1 -1 0 -1 -1 -1 -1 2 0 -1 0 -1 2 -1 1 1 -1 -1 2 2 2 0 -1 -1 -1 -1 -1 -1 2 1 0 -1 2 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 0 -1 -1 0 0 -1 1 -1 1 1 1 -1 -1 -1 -1 -1 2 -1 -1 -1 0 -1 1 0 2 -1 2 -1 1 1 1 -1 -1 2 -1 -1 0 2 0 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 2 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 0 2 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 2 -1 -1 -1 -1 -1 -1 0 1 -1 -1 2 -1 -1 1 0 2 -1 1 1 0 1 0 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 
57